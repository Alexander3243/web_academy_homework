"""
1. Дано два списки чисел. Знайдіть усі числа, які входять як до першого, так і до
другого списку і виведіть їх у порядку зростання.
"""

nums1 = [1, 3, 55, 8, 9, 66, 10]
nums2 = [1, 6, 57, 66, 11, 10]

include_nums1_nums2 = sorted(set(nums1) & set(nums2))

print(*include_nums1_nums2)

"""
2. Напишіть скрипт Python для сортування (за зростанням та зменшенням) словника за значенням.
"""

d = {1: 33, 2: 10, 3: 89, 4: 1, 5: 76}

sort_d = sorted(d.items(), key=lambda value: value[1])
sort_d_reverse = sorted(d.items(), key=lambda value: value[1], reverse=True)

print(dict(sort_d))
print(dict(sort_d_reverse))

"""
3. Напишіть програму на Python для суми всіх елементів словника.
"""

# непонятня для каких элементов нужно было посчитать сумму, решил посчитать для ключей, значений и для ключей и значений
d = {1: 33, 2: 10, 3: 89, 4: 1, 5: 76}

sum_d_keys = sum(d)
sum_d_values = sum(d.values())
sum_d_keys_values = sum_d_keys + sum_d_values

print(sum_d_keys)
print(sum_d_values)
print(sum_d_keys_values)

"""
4. Напишіть перевірку, чи є рядок паліндромом. Паліндром - це слово або фраза, які 
однаково читаються зліва направо та праворуч наліво.
"""

word = input()

if word == word[::-1]:
    print("Полиндром")
else:
    print("Не полиндром")

"""
5. Користувач вводить кількість секунд.Зробіть так, щоб число секунд 
відображалось у вигляді дні:години:хвилини:секунди.
"""

total_seconds = int(input())

days = total_seconds // 60 // 60 // 24 % 24
hours = total_seconds // 60 // 60 % 24
minutes = total_seconds // 60 % 60
seconds = total_seconds % 60

print(f"{days}:{hours}:{minutes}:{seconds}")

"""
6. Ви приймаєте від користувача послідовність чисел, розділених комою. Складіть список і кортеж із цими числами.
"""

numbers = input()

numbers_list = [int(i) for i in numbers.split(",")]
numbers_tuple = tuple(numbers_list)

print(numbers_list, numbers_tuple)

"""
7. При заданій цілій кількості n порахуйте n + nn + nnn. (n=5 => 5+55+555)
"""

n = input()

print(int(n) + int(n + n) + int(n + n + n))

"""
8. Напишіть програму, яка приймає два списки та виводить усі елементи першого, яких немає у другому.
"""

# вводим данные через пробел, например: 1 2 4 5 6 7 8

list_1 = [i for i in input().split()]
list_2 = [i for i in input().split()]

print(set(list_1) - (set(list_2)))

"""
9. Знайдіть з рандомного списку всі числа які діляться на 15. (В один рядок)
"""

new_list = [i for i in [4, 6, 45, 15, 33, 7, 88, 97, 13, 125425] if i % 15 == 0]
print(new_list)

"""
10. Юзер вводить текст. Вам потрібно зробити словник в якому ключами є слова того тексту , а 
значеннями відповідно кіл-ть тих слів.
"""
# будем считать что все слова в тексте вводятся без знаков препинания и только через пробелы
text = input()

dict_words = {i: text.count(i) for i in text.split()}

print(dict_words)

"""
11.Перевірити, чи є в послідовності дублікати.
"""
sequence = [1, 35, 6, 7, 8, 14, 53, 3, 2]

for i in sequence:
    if sequence.count(i) > 1:
        print("Ecть дубликаты")
        break
else:
    print("Дубликатов нет")

"""
12.Автомобіль подолав відстань s км через населений пункт за t хв. Визначити, чи не порушив водій правил 
дорожнього руху, якщо швидкість автомобіля при цьому не повинна перевищувати 60 км/год.
"""
s = 100
t = 180
MAX_SPEED = 60

# расчет по формуле s / (t / 60), где t делим на 60 и получаем кол-во часов
# затем скорость делим на кол-во часов и получуем скорость км/ч

print("Превысил" if s / (t / 60) > 60 else "Не превысил")

"""
13. Порахувати кіл-ть додатніх чисел в списку (в один рядок)
"""

print(sum([i for i in [1, -4, 5, 6, -8, 9, -22, 5] if i > 0]))

"""
14. Напишіть програму, яка запропонує користувачеві ввести десяткове число у межах від 1 до 10. Програма повинна 
вивести версію римського числа. Програма має враховувати ситуацію, якщо введене число є за межами діапазону від 1 до 10.
"""

ROMAN_NUMBERS = {1: "I", 2: "II", 3: "III", 4: "IV", 5: "V", 6: "VI", 7: "VII", 8: "VIII", 9: "IX", 10: "X"}

while True:
    num = int(input("Введите целое число от 1 до 10: "))
    if 1 <= num <= 10:
        print(ROMAN_NUMBERS[num])
        break
    else:
        print("Вы должны ввести число от 1 до 10")
        continue

"""
15. Перевести число, введене користувачем, у байти або кілобайти в залежності від його вибору.
Користувач вводить значення у мегабайтах і, відповідно, вводить напрямок переведення: B (у байти) або KB (у кілобайти).
"""

num = int(input("Введите число в мегабайтах: "))
value = input("Во что переводим? ")

if value == "B":
    print(num * 1024 * 1024)
elif value == "KB":
    print(num * 1024)
else:
    print("Нужно указать \"KB\" или \"B\"")

"""
16. Напишіть програму для знаходження коренів квадратного рівняння a*x2 + b*x + c = 0.
Користувач вводить значення коефіцієнтів a, b, c. У вхідних даних наведено три пари вхідних значень коефіцієнтів, а у
вихідних даних - відповідні повідомлення про кількість коренів або їх відсутність.
"""
a = int(input())
b = int(input())
c = int(input())

# для расчета данного уравнения вычислим дискриминант по формуле D = b2 − 4ac
D = b**2 - 4 * a * c

# проверяем на наличие корней
if D < 0:
    print("Корней нет")
elif D == 0:
    print("Есть один корень")
else:
    print("Есть два различных корня")

"""
17. Дано ціле число k (1 ≤ k ≤ 365). Визначити, яким буде k-й день року: вихідним (субота або неділя) або 
робочим, якщо 1 січня - понеділок.
"""

k = int(input())

for i in range(0, 365):
    if i % 7 == 0:
        if i + 1 == k:
            print("Понедельник")
        elif i + 2 == k:
            print("Вторник")
        elif i + 3 == k:
            print("Среда")
        elif i + 4 == k:
            print("Четверг")
        elif i + 5 == k:
            print("Пятница")
        elif i + 6 == k:
            print("Суббота")
        elif i + 7 == k:
            print("Воскресенье")

"""
18. Визначити, чи увійде в конверт з внутрішніми розмірами a і b мм прямокутна листівка з розмірами с і d мм.
Для розміщення листівки в конверті необхідний проміжок в 1 мм з кожної сторони.
Значення сторін листівки і конверту - цілі числа.
"""

a = int(input()) #высота конверта
b = int(input()) #ширина конверта
c = int(input()) #высота листовки
d = int(input()) #ширина листовки

# с помощью данного условия проверим может ли поместиться листовка в конверт, горизонтально либо веритикально

if a - 1 >= c and b - 1 >= d or a - 1 >= d and b - 1 >= c:
    print("Влазит")
else:
    print("Не влазит")

"""
19. Напишіть функцію для отримання всіх можливих двозначних комбінації літер із рядка цифр (від 1 до 9).
Для розв’язування задачі використайте словник:
"""

def combination(num: int) -> list:
    string_maps = {
          '1': 'abc',
          '2': 'def',
          '3': 'ghi',
          '4': 'jkl',
          '5': 'mno',
          '6': 'pqrs',
          '7': 'tuv',
          '8': 'wxy',
          '9': 'z'}

    list_matching = []      #список со всем совпадениями значений из словаря string_maps
    list_combination = []   #список всех комбинаций

    for i in str(num):
        for k, v in string_maps.items():
            if i in k:
                list_matching.append(v)

    # находим комбиницию при этом на вход должно приходить двухзначное число, иначе работать не будет
    # не удалось реализовать с трехзначным и более + не до конца понятен алгоритм

    for char_index_first in list_matching[0]:
        for char_index_second in list_matching[1]:
            list_combination.append(char_index_first + char_index_second)

    return list_combination

"""
20. Напишіть функцію для перевірки, чи є рядок «панграмою» чи ні.
Примітка. Панграма - фраза, вислів або текст в якому присутні всі літери абетки принаймні по одному разу.
Наприклад: «How vexingly quick daft zebras jump» (30 літер),
«The five boxing wizards jump quickly» (31 літера),
«Cwm fjord bank glyphs vext quiz» (26 літер), «The quick brown fox jumps over the lazy dog» (35 літер).
"""


sentence = set(input().lower().replace(" ", ""))

if len(set(sentence)) == 26:
    print("Панграмма")
else:
    print("Не панграмма")

"""
21. дано кількість голів n та лап m серед курчат та кроликів на фермі. Скільки курчат і кроликів на фермі?
"""

n = int(input())
m = int(input())

# У одного кролика – 4 лапки, а у цыплёнка – 2 лапки.
# Пусть x - количество кроликов, а y – количество цыплят.
# Тогда 4x – количество лапок у кроликов, а 2y – количество лапок у цыплят. Получаем систему уравнений:
# 4 * x + 2 * y = 20
# с помощью метода перебора и двойного цикла найдем количество живности, перебирать будем по количеству голов - 1 (n-1),
# так как максимальное количество кролей может быть n-1 и цыплят n-1, так же напишем дополнительное условие,
# которое будет сверять кол-во живности по головам

for x in range(1, n):
    for y in range(1, n):
        if 4 * x + 2 * y == m and x + y == n:
            print(f"Кролей: {x}, Цыплят: {y}")

"""
22. Дано натуральне число n (1 ≤ n ≤ 9999), що визначає вартість товару в копійках.
Подайте вартість у гривнях і копійках. Якщо у результаті виходить 0 копійок, то замість цього значення
необхідно записати порожній рядок.
"""

n = int(input())

if n % 100 == 0:
    print("")
else:
    print(f"Стоимость: {int(n / 100)} гривен, {int(n % 100)} копеек")

"""
23. Дано трицифрове ціле число. Визначити суму першої і останньої цифр числа і порівняти її із
значенням другої цифри числа. Відповідно вивести повідомлення: >, < і =.
"""

num = input()

if int(num[0]) + int(num[2]) > int(num[1]):
    print("Сумма первой и третьей цифры > второй")
elif int(num[0]) + int(num[2]) < int(num[1]):
    print("Сумма первой и третьей цифры < второй")
elif int(num[0]) + int(num[2]) == int(num[1]):
    print("Сумма первой и третьей цифры = второй")

"""
24. Напишіть програму, у яку вводяться трицифрове ціле число і цифра.
Необхідно визначити, чи входить у число введена цифра.
"""

#вводим 2 числа через пробел
list_nums = list(map(str, input().split()))

if list_nums[1] in list_nums[0]:
    print("Входит")
else:
    print("Не входит")

"""
25. Дано трицифрове ціле число. Визначити кількість однакових цифр у записі числа і вивести значення цієї кількості.
"""

num = input()

for i in sorted(set(num)):
    print(f"Цифра {i} встречается {num.count(i)} раз(а)")

"""
26. Дано чотирицифрове число. Замінити усі парні цифри числа на символ * і вивести число. (2358 -> *35*)
"""

num = input()

for i in num:
    if int(i) % 2 == 0:
        num = num.replace(i, "*")

print(num)

"""
27. Дано натуральне число n (n ≤ 9999). З’ясувати, чи різні усі чотири цифри цього числа (з урахуванням чотирьох цифр).
Наприклад, в числі 5623 усі цифри різні, в числі 0012 - ні.
"""

num = input()

if len(set(num)) == len(num):
    print("Числа разные")
else:
    print("Есть одинаковые числа")

"""
28. Напишіть програму, у якій до введеного числа додаються написи: «гривень» (hryven),
«гривня» (hryvnia), «гривні» (hryvni), згідно з правилами українського правопису
"""

grn = input()

if grn[-1] == "1" and grn[-2:] != "11":
    print(grn, "hryvnia")
elif grn[-2] != "1":
    if grn[-1] == "2" or grn[-1] == "3" or grn[-1] == "4":
        print(grn, "hryvni")
else:
    print(grn, "hryven")

"""
29. Напишіть програму-таймер зворотного відліку, яка запитує у користувача кількість секунд n, з якої слід починати
відлік.
"""

num = int(input())

for i in reversed(range(1, num+1)):
    print(i)
print("start!")

"""
30. Надрукувати у рядку m разів число n. Числа m і n - цілі числа, які вводить
користувач у порядку n, m (Створити цю строку в один рядок, якщо то можливе)
"""

n, m = list(map(int, input().split()))

print(*[n for i in range(m)])

"""
31. Є список будь-яких чисел. Зробити словник в якому будуть два ключі "+" і "-" , значенням ключа "+" - сума
всіх додатніх елементів , "-" - від'ємних
"""

list_numbers = [-1, 433, 6, 7, -10, -134, 6, 1]

positive_numbers = sum([i for i in list_numbers if i > 0])
negative_numbers = sum([i for i in list_numbers if i < 0])

dict_numbers = {"+": positive_numbers, "-": negative_numbers}

print(dict_numbers)

"""
32. Напишіть програму для створення таблиці множення (від 1 до 10) для введеного цілого числа n.
"""

num = int(input())

for i in range(1, 11):
    print(f"{num} * {i} = {num * i}")